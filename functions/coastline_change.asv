function [COAST,GROYNE]=coastline_change(S,COAST,TRANSP,STRUC,GROYNE,TIME,NOUR,CC,CLIFF)
% function [COAST,GROYNE]=coastline_change(COAST,TRANSP,STRUC,GROYNE,TIME,NOUR,CC)
% 
% updates the coastline at each time step based on transport gradients,
% nourishment volumes and sea level rise
% modifications to describe coastline behaviour next to groynes
%
%% Copyright notice
%   --------------------------------------------------------------------
%   Copyright (C) 2020 IHE Delft & Deltares
%
%       Dano Roelvink
%       d.roelvink@un-ihe.org
%       Westvest 7
%       2611AX Delft
%
%       Bas Huisman
%       bas.huisman@deltares.nl
%       Boussinesqweg 1
%       2629HV Delft
%
%   This library is free software: you can redistribute it and/or
%   modify it under the terms of the GNU Lesser General Public
%   License as published by the Free Software Foundation, either
%   version 2.1 of the License, or (at your option) any later version.
%
%   This library is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%   Lesser General Public License for more details.
%
%   You should have received a copy of the GNU Lesser General Public
%   License along with this library. If not, see <http://www.gnu.org/licenses
%   --------------------------------------------------------------------
    
    if isempty(COAST.x)
       return; 
    end    
    
    eps=1e-1;
    idgroyne=[];

    %% spatial steps
    n=COAST.n;
    nq=COAST.nq;
    nend=n;

    %% Spatial discretisation
    x0=COAST.x;y0=COAST.y;
    COAST.dSds=zeros(1,n);
    COAST.dndt=zeros(1,n);
    COAST.dx=zeros(1,n);
    COAST.dy=zeros(1,n);
    COAST.ds=zeros(1,n);
    
    %% Determine dominant bypass transport
    for ig=1:GROYNE.n
        [~,imx]=max(abs(GROYNE.QS(ig,:)));
        GROYNE.QS(ig,:)=GROYNE.QS(ig,imx);
    end
    
    %% Coastline treatment if a groyne is located at the beginning or end of a coastline section
    xbnd = [nan,nan];
    ybnd = [nan,nan];
    for segmentside=1:2
        if segmentside==2  % in case a groyne is located at the start of a coastal segment
            p1=1;
            p2=2;
        elseif segmentside==1  % in case a groyne is located at the end of a coastal segment
            p1=length(COAST.x);
            p2=length(COAST.x)-1;
        end
    if ~isempty(GROYNE.x)
        [idgroyne]=find(GROYNE.idcoast(:,segmentside)==COAST.i_mc);
    end
    
        %% Force the bypass transport rate in the area that is shadowed by the groyne
    if ~isempty(idgroyne)
        if GROYNE.QS(idgroyne,segmentside)<0 && segmentside==1
            ishadow=find(TRANSP.QS<-eps,1,'last'); %+1
            if ishadow<length(TRANSP.QS)
                TRANSP.QS(ishadow:end)=GROYNE.QS(idgroyne,segmentside);
            end
        elseif GROYNE.QS(idgroyne,segmentside)>0 && segmentside==2
                ishadow=find(TRANSP.QS>eps,1,'first'); %-1
            if ishadow>0
                TRANSP.QS(1:ishadow)=GROYNE.QS(idgroyne,segmentside);
            end
        end
    end
    
        %% Determine the location where the coastline attaches to the perimeter of a groyne
        if ~isempty(idgroyne)
            % determine the which groyne is used (index 'ist'), the groyne polygon (x_hard, y_hard) and path along groyne perimeter (s_hard)
        ist=GROYNE.strucnum(idgroyne);
        [~    ,xhard,~   ,~ , ~ ] = get_one_polygon( STRUC.s_hard,STRUC.x_hard,ist );
        [shard,yhard,~   ,~ , ~ ] = get_one_polygon( STRUC.s_hard,STRUC.y_hard,ist );
        COAST.ds(p1)=hypot(COAST.x(p2)-COAST.x(p1),COAST.y(p2)-COAST.y(p1))/2;
        
            % compute the coastal change (dn) at the coastline point adjacent to the groyne
            segmentsign=(segmentside*2-3);
            COAST.dSds(p1)=segmentsign*(TRANSP.QS(min(p1,length(TRANSP.QS)))-GROYNE.QS(idgroyne,segmentside))/COAST.ds(p1);
            COAST.dndt(p1)=-COAST.dSds(p1)/COAST.h0;                          % dndt in [m/yr] = alongshore gradient in sediment transport in [m3/yr/m] divided by 'active height' [m]
            dn=(COAST.dndt(p1)+(NOUR.growth*NOUR.rate_m3_per_m_yr(p1)/COAST.h0)-CC.SLRo/COAST.tanbeta)*TIME.dt;      % dndt in [m/yr] + nourishment in [m3/m/yr] divided by the active height [m]

            % Make sure that the intersection of the coastline with the groyne is not beyond the tip of the groyne
            % GROYNE.s is the distance along the groyne polygon where the crossing is found
            shard_tip=shard(GROYNE.tipindx(idgroyne,segmentside));
            if segmentside==2
                GROYNE.s(idgroyne,segmentside)=max(GROYNE.s(idgroyne,segmentside)-dn,shard_tip);  
            end
            if segmentside==1
                GROYNE.s(idgroyne,segmentside)=min(GROYNE.s(idgroyne,segmentside)+dn,shard_tip);
            end
            
            % find the location where the coastline attaches to the perimeter of the groyne polygon
            GROYNE.x(idgroyne,segmentside)=interp1(shard,xhard,GROYNE.s(idgroyne,segmentside)); 
            GROYNE.y(idgroyne,segmentside)=interp1(shard,yhard,GROYNE.s(idgroyne,segmentside)); 
            if ~isnan(GROYNE.x(idgroyne,segmentside))
                xbnd(segmentside)=GROYNE.x(idgroyne,segmentside);
                ybnd(segmentside)=GROYNE.y(idgroyne,segmentside);
            end
        end
    end

    %% COMPUTE RATE OF COASTLINE CHANGE
    % dSds : rate of volumetric change in [m3/yr per meter coastline length]
    % dndt : rate of coastline change in [m/yr]
    for i=1:n
        if COAST.cyclic
            im1=mod2(i-1,n);
            ip1=mod2(i+1,n);
            im1q=mod2(i-1,nq);
            ip1q=mod2(i,nq);
        else
            im1=max(i-1,1);
            ip1=min(i+1,n);
            im1q=max(i-1,1);
            ip1q=min(i,nq);
        end        
        %%
        TRANSP.QS(end+1)=TRANSP.QS(end);
        %%
        COAST.ds(i)=hypot(COAST.x(ip1)-COAST.x(im1),COAST.y(ip1)-COAST.y(im1));
        COAST.dSds(i)=(TRANSP.QS(ip1q)-TRANSP.QS(im1q))*2/COAST.ds(i); %,COAST.ds0);  
        COAST.dndt(i)=-COAST.dSds(i)/COAST.h0;                                      
    end

    %% ADD BOUNDARY CONDITIONS
    if strcmpi(TRANSP.boundary_condition_start,'Periodic') && ~COAST.cyclic
        % periodic b.c.
        COAST.dndt(1)=COAST.dndt(end-1);
    end
    if strcmpi(TRANSP.boundary_condition_end,'Periodic') && ~COAST.cyclic
        % periodic b.c.
        COAST.dndt(end)=COAST.dndt(2);
    end
    if strcmpi(TRANSP.boundary_condition_start,'Closed') && ~COAST.cyclic
        % zero transport b.c.
        COAST.dSds(1)=TRANSP.QS(1)/COAST.ds(1);
        COAST.dndt(1)=-COAST.dSds(1)/COAST.h0;
    end
    if strcmpi(TRANSP.boundary_condition_end,'Closed') && ~COAST.cyclic
        % zero transport b.c.
        COAST.dSds(nend)=-TRANSP.QS(nend-1)/COAST.ds(nend-1);
        COAST.dndt(nend)=-COAST.dSds(nend)/COAST.h0;
    end
    if strcmpi(TRANSP.boundary_condition_start,'Neumann') && ~COAST.cyclic
        % zero transport b.c.
        COAST.dSds(1)=0;
        COAST.dndt(1)=-COAST.dSds(1)/COAST.h0;
    end
    if strcmpi(TRANSP.boundary_condition_end,'Neumann') && ~COAST.cyclic
        % zero transport b.c.
        COAST.dSds(nend)=0;
        COAST.dndt(nend)=-COAST.dSds(nend)/COAST.h0;
    end

    for i=1:n
        if COAST.cyclic
            im1=mod2(i-1,n);
            ip1=mod2(i+1,n);
        else
            im1=max(i-1,1);
            ip1=min(i+1,n);
        end

        
        if size(CLIFF.Drift_Vol_shore,2)~=size(COAST.dndt,2) %&& size(COAST.x_mc)~=size(CLIFF.x_mc)
            method=S.interpolationmethod;
            var1.drift = [];
            var2.useless = [];
            var1.drift = CLIFF.Drift_Vol_shore;
            var2.useless = zeros(size(var1.drift));
            [var1i,~,~] = get_interpolation_on_grid(method,COAST.x_mc,COAST.y_mc,CLIFF.x_mc,CLIFF.y_mc,var1,var2);
            CLIFF.Drift_Vol = [];
            CLIFF.Drift_Vol=var1i.drift;
        else
            CLIFF.Drift_Vol = [];
            CLIFF.Drift_Vol = CLIFF.Drift_Vol_shore;
        end

        dn=(COAST.dndt(i)+(NOUR.rate_m3_per_m_yr(i)/COAST.h0)+(CLIFF.Drift_Vol(i)/(COAST.h0+CLIFF.Ej))-CC.SLRo/COAST.tanbeta)*TIME.dt;
        COAST.dx(i)=-dn*(COAST.y(ip1)-COAST.y(im1))/COAST.ds(i); %,COAST.ds0);
        COAST.dy(i)= dn*(COAST.x(ip1)-COAST.x(im1))/COAST.ds(i); %,COAST.ds0);
    end

    %% Update coastline positions, all points
    for i=1:n
        COAST.x(i)=x0(i)+COAST.dx(i);
        COAST.y(i)=y0(i)+COAST.dy(i);
    end
    if COAST.cyclic
        COAST.x(n)=COAST.x(1);
        COAST.y(n)=COAST.y(1);
    end

    %% Overwrite coastline position if groyne at begin of coastline section
    if ~isnan(xbnd(2))
        COAST.x(1)=xbnd(2); 
        COAST.y(1)=ybnd(2);
    end

    %% Overwrite coastline position if groyne at end of coastline section
    if ~isnan(xbnd(1))
        COAST.x(n)=xbnd(1);
        COAST.y(n)=ybnd(1);
    end

%% Calculate beach width and foreshore slope ...
% between the shore-line and the cliff-line
opt=2;
[d_min, ~] = p_poly_dist(CLIFF.x, CLIFF.y,COAST.x, COAST.y);
COAST.BeachWidth = d_min;
COAST.ForeshoreSlope = abs(CLIFF.Ej)./ (COAST.BeachWidth);

CLIFF.Pos = CLIFF.x_mc(end);
COAST.Pos = ;
end