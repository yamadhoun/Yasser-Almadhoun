function [COAST]=make_sgrid_mc(COAST,i_mc)
% function [COAST]=make_sgrid_mc(COAST,i_mc)
% 
% OUTPUT:
%     COAST
%         .s       : alongshore distance along the grid [m]
%         .x       : x-coordinates of considered coastal section [m]
%         .y       : y-coordinates of considered coastal section [m]
%         .n       : number of points of considered coastal section
%         .x_mc    : x-coordinate of coastline (all sections)
%         .y_mc    : y-coordinate of coastline (all sections)
%         .ar      : area (not computed)
%         .cyclic  : Index describing whether the considered coastline section is cyclic
%
%% Copyright notice
%   --------------------------------------------------------------------
%   Copyright (C) 2020 IHE Delft & Deltares
%
%       Dano Roelvink
%       d.roelvink@un-ihe.org
%       Westvest 7
%       2611AX Delft
%
%       Bas Huisman
%       bas.huisman@deltares.nl
%       Boussinesqweg 1
%       2629HV Delft
%
%   This library is free software: you can redistribute it and/or
%   modify it under the terms of the GNU Lesser General Public
%   License as published by the Free Software Foundation, either
%   version 2.1 of the License, or (at your option) any later version.
%
%   This library is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%   Lesser General Public License for more details.
%
%   You should have received a copy of the GNU Lesser General Public
%   License along with this library. If not, see <http://www.gnu.org/licenses
%   --------------------------------------------------------------------
    eps=0.1;
    sqrt2=sqrt(2.);
    %% find number of sections
    [ x,y,~,i1,i2 ] = get_one_polygon( COAST.x_mc,COAST.y_mc,i_mc );
    ar=0;
    s=zeros(size(x));
    s(1)=0;
    for i=2:length(x)
        s(i)=s(i-1)+hypot(x(i)-x(i-1),y(i)-y(i-1));
    end
    %ar0=round(polyarea(x,y));
    if max(diff(s))>2*COAST.ds0
        % remove double points
        IDunique = [true,hypot(diff(x),diff(y))>eps];
        x0=x(IDunique);
        y0=y(IDunique);
        % compute distance along line
        s0=zeros(size(x0));
        for i=2:length(x0)
            s0(i)=s0(i-1)+hypot(x0(i)-x0(i-1),y0(i)-y0(i-1));
        end
        ns=ceil(s0(end)/COAST.ds0);
        ds=s0(end)/ns;
        s=[0:ds:s0(end)];
        % interpolate x-values
        x=interp1(s0,x0,s);
        y=interp1(s0,y0,s);
    end
    snew=s;
    %disp(['total length = ',num2str(s(end))]);
    i=2;
    while i<=length(snew)
        ds=snew(i)-snew(i-1);
        if ds<COAST.ds0/sqrt2    % sqrt(2) instead of 2, so grid sizes stay closer to ds0
            %throw out point i
            if i<length(snew)
                snew=[snew(1:i-1),snew(i+1:end)];
            else
                snew=[snew(1:i-2),snew(end)];
            end
        elseif ds>COAST.ds0*sqrt2   % sqrt(2) instead of 2, so grid sizes stay closer to ds0
            %insert point i
            snew=[snew(1:i-1),.5*(snew(i-1)+snew(i)),snew(i:end)];
            i=i+1;
        else
            i=i+1;
        end
    end
    snew(2:end-1)=COAST.smoothfac*snew(1:end-2)+(1.-2*COAST.smoothfac)*snew(2:end-1)+COAST.smoothfac*snew(3:end);
    if length(snew)>1
        x=interp1(s,x,snew);
        y=interp1(s,y,snew);

        %ar=round(polyarea(x,y));
        %disp(['section',num2str(i_mc),' area ',num2str(ar)]);
        s=snew;
    end
    
    %% Check if coastal section is cyclic
    cyclic=hypot(x(end)-x(1),y(end)-y(1))<COAST.ds0;
    
    %% Check if coastal section is clockwise (clockwise=1 means a coastline, while clockwise=0 means a lake)
    clockwise=get_clockpoly(x,y);
    
    % compute locations of transport points
    xq=(x(1:end-1)+x(2:end))/2;
    yq=(y(1:end-1)+y(2:end))/2;
    
    % update structures
    COAST.x=x;
    COAST.y=y;
    if length(COAST.x)<3
       disp('This is too short a coastline segment, good sir.') 
       pause 
    end
    COAST.n=length(x);
    COAST.s=s;
    COAST.xq=xq;
    COAST.yq=yq;
    COAST.nq=length(xq);
    COAST.cyclic=cyclic;
    %COAST.ar=ar;
    COAST.clockwise=clockwise;
    
    %% insert x,y back into COAST.x_mc,COAST.y_mc
    if length(snew)>1
        COAST.x_mc=[COAST.x_mc(1:i1-1),x,COAST.x_mc(i2+1:end)];
        COAST.y_mc=[COAST.y_mc(1:i1-1),y,COAST.y_mc(i2+1:end)];
    end
    COAST.n_mc=length(find(isnan(COAST.x_mc)))+1;
        
end

